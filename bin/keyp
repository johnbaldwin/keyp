#!/usr/bin/env ruby
# encoding: UTF-8

#
# NOTE: This is my first ruby gem and first executable ruby gem. I see a bunch of different
# implementations. A good number and a few well known use Thor, so seems like a good idea to
# figure out how to use Thor as well.
#
# I'm trying out some of the different impementations for Keyp, learning how they work, pros and cons
# Then I'll pick a single approach after exploring them

# TO run in the project dir:
# ruby -Ilib ./bin/keyp

# resolve bin path, ignoring symlinks
require 'pathname'
bin_file = Pathname.new(__FILE__).realpath

# http://davetron5000.github.io/gli/
require 'gli'

require 'pp'

require 'keyp'
include GLI::App

# keyp set key=value
# keyp get key
# keyp


# keyp create bag

program_desc 'A command line interface for the Keyp key:value manager'

desc 'The Keyp bag to use'
flag [:b,:bag], default_value: 'default'

desc 'Enable debug mode'
switch [:d, :debug]

desc 'Suppress hints: If invalid parameters are set, no suggestive feedback will be provided'
switch [:s, :suppress]



version Keyp::VERSION


# TODO: fix this because this implies that we either already have a bag or it will create a new one
pre do |global_options, command, options, args|
  # initialize our store
  $debug = global_options[:debug]
  if $debug
    puts "pre-hook"
    puts "command:"
    pp command
    puts "options:"
    puts options
    puts "args: #{args}"
    puts "args.class=#{args.class}"
    puts "---- end prehook ---"
  end

  unless [:setup, :show, :delete].include? command.name
    # check if we are configured
    unless Keyp.configured?
      puts "Please run setup to use Keyp. Run with --help to view help menu"
      exit 1
    end

    $bag = Keyp.bag(global_options[:bag])
  else
    $bag = nil
  end
  true # hack to prevent
end


desc 'Get the value for a key'
long_desc 'Shows the value for the supplied key'
#
# Key,value commands
#arg_name 'keys', :multiple
command :get do |c|
  c.desc 'Shows the value for the supplied key.'

  #c.switch [:v,:value]
  c.action do |global_options,options,args|

    #help_now!('key is required') if args.empty?
    if args.empty? && !global_options[:suppress]
      puts "Usage: keyp get KEY"
      puts "Must specify a key."
    else
      val = $bag.data[args[0]]
      unless val.nil?
        puts val
      else
        puts ''
      end
    end
  end
end

# TODO: set is not optimal. Right now it only handles a single key/value pair and
# any global or command parameters after the key=value will be sucked into the value
# Se we'll need to implement values in quotes if the value contains whitespace

desc 'set the value for the supplied key'
long_desc 'Sets the value for the supplied key. If the key exists, the value will be overwritten'

arg_name 'values', :multiple
command :set do |c|
  c.desc 'Set the value for the supplied key. If the key exists, the value will be overwritten'
  c.action do |global_options,options,args|
    # When/if implementing multiple key assignments
    # check args.length % 2
    # parse the args,

    # concatenate all the args
    # then parse on =
    buff = ''
    args.each do |arg|
      buff << arg << ' '
      buff
    end

    nvp = Keyp.parse_arg_string buff

    if nvp
      $bag[nvp[:key]] = nvp[:value].strip
    elsif global_options[:suppress] == false
      # puts "Usage keyp set KEY1=VALUE1 [KEY2=VALUE2 ...]"
      puts "Usage: keyp set KEY=VALUE"
    end

    # $bag.data[]
  end
end

desc 'removes the key and value for the supplied key'
command :unset do |c|
  c.action do |global_options,options, args|
    if args.length == 0
      # puts 'Usage: keyp unset KEY1 [KEY2 ...]'
      puts 'Usage: keyp unset KEY1'
      puts 'Must specify a key to unset.'
    else
      printf "Unsetting #{args[0]}..."
      # if delete
      val = $bag.delete(args[0])
      if val
        puts "unset #{args[0]}: #{val}"
        printf "done.\n"
      else
        puts "key \"#{args[0]}\" not found"
      end

    end
  end
end

desc 'lists all the key:value pairs in the bag.'
command :list do |c|
  c.action do |global_options, options, args|

    # TODO: implement display options

    puts "* bag:#{$bag.name}"

    unless $bag.empty?
      $bag.data.each do |key,value|
        #printf("$s : $s\n", key,value)
        puts "#{key}: #{value}"
      end
    else
      puts "You have an empty bag."
    end

  end
end


setup_desc = 'Creates and configures the Keyp directory'

desc setup_desc
command :setup do |c|
  c.desc setup_desc
  c.action do |global_options, options, args|
    puts "keyp setup..."
    Keyp::setup
    $bag = Keyp::create_bag 'default'
  end
end

create_desc = 'Creates a new bag'

desc create_desc
command :create do |c|
  c.desc create_desc
  c.action do |global_options, options, args|
    puts "keyp create"
    # TODO: add checking in case store already exists
    #Keyp::create

    bag = Keyp.create_bag(args[0])
    if bag
      puts "created Keyp bag #{bag.name}"
    else
      puts "Unable to create Keyp bag #{args[0]}"
    end
  end
end

delete_desc = 'Deletes an existing bag or set of bags matching the delete parameter'
desc delete_desc
command :delete do |c|
  c.desc 'forces delete (no prompting)'
  c.switch [:f, :force]
  c.desc "outputs the name of each file as it's deleted"
  c.switch [:v, :verbose]
  c.desc "Confirm deletion of each file. Currently not enabled"
  c.switch [:c, :confirm]
  c.desc delete_desc
  c.action do |global_options, options, args|
    # TODO: add * for all bags
    # TODO: enable prompting per file. Confirm skips the global confirm

    help_now!('filename pattern is required') if args.empty?

    if options[:force]
      do_delete = true
    else
      puts "This will delete all the bags matching \"#{args[0]}\"."
      print "Are you sure? (yes to confirm. Anything else to cancel) "
      do_delete = STDIN.gets.chomp.upcase == 'YES'
    end

    if do_delete
      # experimenting with different techniques
      delete_type = 1
      case delete_type
        when 1
          files = Dir["#{File.join(Keyp.home,args[0]+Keyp.ext)}"]
          puts "going to delete files #{files}" if $debug
          files.each do |f|
            File.delete(f)
            puts "deleted #{File.basename(f, Keyp.ext)}" if options[:verbose]
          end
        when 2
          result = File.delete(args[0])
          puts "delete results: #{result}"
          #TODO: provide feedback
      end
    else
      puts "delete bag(s) canceled."
    end
  end
end

show_desc = 'Lists all the bags in Keyp'
desc show_desc
command :show do |c|
  c.desc show_desc
  c.action do |global_options, options, args|
    # TODO: implement filtering, stats (like number of items in a bag, last updated, etc)
    # and just filename
    bags = Keyp.bag_names
    bags.each do |bag|
      puts "#{bag}"
    end
  end
end

post do |global_options, command, options, args|

  unless [:setup, :show, :delete].include? command.name
    if $debug
      puts "post-hook, state of bag.dirty = #{$bag.dirty}"
    end
    # if bag.data is dirty, then save
    # TODO: check bag.save. if it checks dirty, then we don't need to check here
    $bag.save
  else
    true
  end
end

# bag management commands

# create a bag
# command :create

# delete a bag (with confirmation)

# show bags
# command :show




exit run(ARGV)
